<? xml version="1.0" ?>
<project name="DemoD3D" width=512 height=512>
    <assets>
        <constants>
            <constant name="RTSIZE" value=512 />
        </constants>
        
        <scenes>
            <scene name="MainScene">
                <file name="../../../Models/LargoCamoes/largoCamoes.nbo" />
            </scene>
        </scenes>

        <viewports>
            <viewport name="MainViewport">
                <CLEAR_COLOR r="1.0" g="1.0" b="1.0" />
            </viewport>
        </viewports>

        <cameras>
            <camera name="MainCamera" >
				<viewport name="MainViewport" />
				<projection TYPE="PERSPECTIVE" FOV=60.0 NEAR=0.3 FAR=1000.0 />
				<POSITION x="-40.593395" y="32.43354" z="-1.299236" />
				<VIEW x="0.901307" y="-0.361665" z="-0.238421" /> 
				<UP x="0.0" y="1.0" z="0.0" />
			</camera>
        </cameras>

        <lights>
            <light name="Sun" >
				<POSITION x="-52" y="77.0" z="-27.0" />
				<DIRECTION x="0.597" y="-0.390" z="0.700" />
				<COLOR r="0.9" g="0.9" b="0.9" />
				<AMBIENT r="0.5" g="0.5" b="0.5" />
			</light>
        </lights>

        <materialLibs>
            <materialLib filename="hybridrendering.mlib" />
        </materialLibs>
    </assets>

    <pipelines>
        <pipeline name="Hybrid" default="true" defaultCamera="MainCamera">
            <pass class="default" name="D3D">
                <scenes>
                    <scene name="MainScene" />
                </scenes>
                <camera name="MainCamera" />
                <lights>
                    <light name="Sun" />
                </lights>
                <renderTarget name="d3d" fromLibrary="Hybrid Rendering" />
                <injectionMaps>
                    <map toMaterial="*">
                        <shader fromMaterial="raster" fromLibrary="Hybrid Rendering" />
                    </map>
                    <map toMaterial="Vidro">
                        <shader fromMaterial="mask" fromLibrary="Hybrid Rendering" />
                    </map>
                    <map toMaterial="Grade*">
                        <shader fromMaterial="mask" fromLibrary="Hybrid Rendering" />
                    </map>
                </injectionMaps>
            </pass>
            
            <pass class="optix" name="DXR">
                <scenes>
                    <scene name="MainScene" />
                </scenes>
                <camera name="MainCamera" />
                <renderTarget name="dxr" fromLibrary="Hybrid Rendering" />
                <lights>
                    <light name="Sun" />
                </lights>
                <optixEntryPoint>
                    <optixProgram type="RayGen" file="shaders/shader12.hlsl" proc="raygen" />
                </optixEntryPoint>
                <optixDefaultMaterial>
                    <optixProgram type="Closest_Hit" ray="Phong" file="shaders/shader12.hlsl" proc="shade" />
                    <optixProgram type="Miss"        ray="Phong" file="shaders/shader12.hlsl" proc="miss" />
                    <optixProgram type="Any_Hit"     ray="Shadow" file="shaders/shader12.hlsl" proc="anyHitShadow" />
                    <optixProgram type="Miss"        ray="Shadow" file="shaders/shader12.hlsl" proc="missShadow" />
                </optixDefaultMaterial>
                <optixMaterialMap>
                    <optixMap to="__nau_material_lib:Vidro">
                        <optixProgram type="Closest_Hit" ray="Phong" file="shaders/shader12.hlsl" proc="shadeGlass" />
                        <optixProgram type="Any_Hit"     ray="Shadow" file="shaders/shader12.hlsl" proc="glassShadow" />
                    </optixMap>
                    <optixMap to="__nau_material_lib:Grade*">
                        <optixProgram type="Closest_Hit" ray="Phong" file="shaders/shader12.hlsl" proc="shade" />
                        <optixProgram type="Any_Hit"     ray="Phong" file="shaders/shader12.hlsl" proc="anyHitGrade" />
                        <optixProgram type="Any_Hit"     ray="Shadow" file="shaders/shader12.hlsl" proc="gradeShadow" />
                    </optixMap>
                </optixMaterialMap>
                <optixVertexAttributes>
                    <attribute name="position" />
                    <attribute name="normal" />
                    <attribute name="texCoord0" />
                    <attribute name="index" />
                </optixVertexAttributes>
                <optixMaterialAttributes>
                    <valueof optixVar="diffuse" type="COLOR" context="CURRENT" component="DIFFUSE" />
                    <!--valueof optixVar="ambient" type="COLOR" context="CURRENT" component="AMBIENT" /-->
                    <valueof optixVar="texCount" type="RENDERER" context="CURRENT" component="TEXTURE_COUNT" />
                </optixMaterialAttributes>
                <optixGlobalAttributes>
                    <valueof optixVar="lightDir" type="LIGHT" context="CURRENT" id=0 component="DIRECTION" />
                    <valueof optixVar="lightPos" type="LIGHT" context="CURRENT" id=0 component="POSITION" />
                    <valueof optixVar="frameCount" type="RENDERER" context="CURRENT" component="FRAME_COUNT" />
                </optixGlobalAttributes>
                <optixInput>
                    <buffer var="mask" texture="Hybrid Rendering::mask" />
                </optixInput>
                <!--optixOutput>
                    <buffer var="depth" texture="Hybrid Rendering::depthMap" />
                </optixOutput-->
            </pass>

            <pass class="compute" name="accumulate">
                <material name="comp" fromLibrary="Hybrid Rendering" dimX=256 dimY=256 dimZ=1 />
            </pass>

            <pass class="compute" name="denoiseAO">
                <material name="denoiseAO" fromLibrary="Hybrid Rendering" dimX=256 dimY=256 dimZ=1 />
            </pass>

            <pass class="quad" name="combine">
                <!--renderTarget name="combine" fromLibrary="Hybrid Rendering" /-->
                <viewport name="MainViewport" />
                <material name="combineDenoise" fromLibrary="Hybrid Rendering" />
            </pass>

            <!--pass class="compute" name="denoise">
                <material name="denoise" fromLibrary="Hybrid Rendering" dimX=256 dimY=256 dimZ=1 />
            </pass-->

            <!--pass class="quad" name="tonemap">
                <viewport name="MainViewport" />
                <material name="tonemap" fromLibrary="Hybrid Rendering" />
            </pass-->
        </pipeline>
    </pipelines>
</project>